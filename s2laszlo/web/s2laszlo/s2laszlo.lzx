<?xml version="1.0" encoding="UTF-8"?>

<library>
    <include href="s2laszloconfig.lzx"/>
    
    <security>
        <allow>
            <pattern>^jp.seasar.laszlo.S2LaszloAdapter</pattern>
        </allow>
    </security>

    <s2laszloconfig name="__s2laszloconifg"/>

    <javarpc name="__s2laszloadapter"
             scope="none"
             classname="jp.seasar.laszlo.S2LaszloAdapter"
             objectreturntype="javabean"
             initstage="immediate ">
             
        <attribute name="loaded" value="false" type="boolean"/>
        <method event="onload">
            this.loaded = true;
        </method>
    </javarpc>
    
    <!--
        エラー用クラス
    
    <class name="S2LaszloError">
        <attribute name="exception"/>
        <attribute name="exceptionMessage"/>
    </class>
    -->
    
    
    <script>
    
        function S2LaszloError( exception, exceptionMessage ) {
            this.exception = exception;
            this.exceptionMessage;
        }
        
        /**
         * S2Laszloクラス コンストラクタ
         */
        function S2Laszlo( target, result, error ) {
            
            this.service = new remotecall( this, {funcname:'service', remotecontext: __s2laszloadapter} );
            this._alreadyInvoked = false;
            this._errorAction = false;
            this._where = null;
            
            if( target != null ) {
                this._component = this._convUndefToNull( target['component'] );
                this._method = this._convUndefToNull( target['method'] );
            }
            
            if( result != null ) {
                
                this._where = this._convUndefToNull( result['where'] );
                this._attribute = this._convUndefToNull( result['attribute'] );
                this._resultInvokeObject = this._convUndefToNull( result['invokeObject'] );
                this._resultInvokeMethod = this._convUndefToNull( result['invokeMethod'] );
            }
            
            if( error != null ) {
                this._errorInvokeObject = this._convUndefToNull( error['invokeObject'] );
                this._errorInvokeMethod = this._convUndefToNull( error['invokeMethod'] );
                this._errorAction = true;
            }
        }
        
        
        /**
         * JavaRPCエラー時のイベント処理
         */
        S2Laszlo.prototype._javarpconerror = function( error ) {
            this._javarpcOnErrorDelegate.unregisterAll();
            
            Debug.write("_javarpconerror");
            Debug.inspect(error);
        }
        
        /**
         * サーバ側Exception発生時のエラー処理
         */
        S2Laszlo.prototype._error = function( errorInfo ) {
        <![CDATA[
            if( this._errorAction ) {
                if( __s2laszloconifg.s2laszlo_debug ) {
                    Debug.write("[S2Laszlo] Server Exception:" + errorInfo['exception'] + ":" + errorInfo['exceptionMessage']);
                }
                var errorDelegate = new LzDelegate(this._errorInvokeObject, this._errorInvokeMethod );
                errorDelegate.execute(errorInfo);
                // this._errorInvokeMethod(errorInfo);
            }
        ]]>
        }
        
        /**
         * データ取得時の処理
         */
        S2Laszlo.prototype._ondata = function( remoteObject ) {
        <![CDATA[
            this._javarpcOnErrorDelegate.unregisterAll();
            
            var success = remoteObject['success'];
            if( !success ){
                var laszloError = new S2LaszloError();
                laszloError.exception = remoteObject['exception'];
                laszloError.exceptionMessage = remoteObject['exceptionMessage'];
                this._error(laszloError);
                return;
            }
            
            var obj = remoteObject['object'];
            
            if( this._where != null && this._attribute != null ) {
                this._where.setAttribute(this._attribute, obj );
            }
            
            if( this._resultInvokeObject != null && this._resultInvokeMethod != null ) {
                var resultDelegate = new LzDelegate(this._resultInvokeObject, this._resultInvokeMethod );
                resultDelegate.execute(obj);
            }
            
        ]]>
        }
        

        /**
         * invokeの実体
         */
        S2Laszlo.prototype._invoke = function( ) {
        <![CDATA[
            var ondataDelegate = new LzDelegate(this, '_ondata');
            ondataDelegate.register( this.service, 'ondata' );
            
            this._javarpcOnErrorDelegate = new LzDelegate( this, '_javarpconerror');
            this._javarpcOnErrorDelegate.register(__s2laszloadapter, 'onerror');
            
            
            if( !this._checkRequest() ) {
                return;
            }
            
            var params = null;
            if( this._argList == null ){
                params = new Array(this._component, this._method);
            } else {
                params = new Array(this._component, this._method, this._argList);
            }
            this.service.invoke(params, null);
        ]]>
        }
        
        /**
         * Flash起動直後にJavaRPCを呼び出すとエラーとなるため、ここでリトライする
         */
        S2Laszlo.prototype._retryInvoke = function( ) {
            if( !__s2laszloadapter.loaded ) {
                var invokeDelegate = new LzDelegate( this, "_retryInvoke");
                LzTimer.addTimer( invokeDelegate, __s2laszloconifg.load_retry_time );
                return;
            }
            this._invoke();
        }
        
        
        /**
         * サーバ側の処理実行
         */
        S2Laszlo.prototype.invoke = function( ) {<![CDATA[
            
            if( this._alreadyInvoked ) {
                Debug.write("s2laszlo already invoked");
                return;
            } else {
                this._alreadyInvoked = true;
            }
            
            // argumentsを利用できる?
            
            if( arguments != null && arguments.length != 0 ) {
                this._argList = new Array();
                for( var i = 0; i < arguments.length; i++ ) {
                    this._argList[i] = arguments[i];
                }
            } else {
                this._argList = null;
            }
            
            
            // Debug.write(arguments);
            // if( arguments != null && arguments.length != 0 ) {
            //     this._argList = arguments;
            // } else {
            //     this._argList = null;
            // }
            //if( argList == undefined ) {
            //    this._argList = null;
            //} else {
            //    this._argList = argList;
            //}
            
            if( !__s2laszloadapter.loaded ) {
                this._retryInvoke();
                return;
            }
            this._invoke();
        ]]>
        }
        
        /**
         * invoke時の入力値チェック
         */
        S2Laszlo.prototype._checkRequest = function( ) {
            var checkFlag = true;
            
            if( this._component == null ) {
                this.onerror.sendEvent( "component undefined.");
                checkFlag = false;
            }
            if( this._method == null ) {
                this.onerror.sendEvent( "method undefined.");
                checkFlag = false;
            }
            return checkFlag;
        }
        
        S2Laszlo.prototype._convUndefToNull = function (obj) {
            if( obj == undefined ) {
                return null;
            }
            return obj;
        }
        
    </script>
    
    
</library>

<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
 * Copyright 2005 the Seasar Foundation and the Others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
* X_LZ_COPYRIGHT_END ****************************************************** -->
